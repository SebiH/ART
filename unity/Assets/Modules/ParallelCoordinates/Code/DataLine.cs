using Assets.Modules.Core;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using UnityEngine;

namespace Assets.Modules.ParallelCoordinates
{
    /// <summary>
    /// Collects line segments generated by line generator which belong to the same data index, for easier operations on all segments
    /// </summary>
    public class DataLine
    {
        public int DataIndex { get; private set; }

        private const float DEFAULT_WIDTH = 0.003f;
        private const float FILTERED_WIDTH = 0.0005f;

        private List<LineSegment> _lineSegments = new List<LineSegment>();
        private Color32 _defaultColor;
        private bool _isHighlighted = false;

        public DataLine(int dataIndex)
        {
            DataIndex = dataIndex;
            _defaultColor = Theme.GetColor32(dataIndex);
        }

        public void AddSegment(LineSegment segment)
        {
            _lineSegments.Add(segment);
            SetHighlight(_isHighlighted, segment);
        }

        public void RemoveSegment(LineSegment segment)
        {
            _lineSegments.Remove(segment);
        }

        public void SetHighlight(bool isHighlighted)
        {
            if (_isHighlighted != isHighlighted)
            {
                _isHighlighted = isHighlighted;
                foreach (var segment in _lineSegments)
                {
                    SetHighlight(isHighlighted, segment);
                }
            }
        }

        private void SetHighlight(bool isHighlighted, LineSegment segment)
        {
            if (isHighlighted)
            {
                segment.Color = _defaultColor;
                segment.Width = DEFAULT_WIDTH;
            }
            else
            {
                segment.Color = new Color32(0, 0, 0, 255);
                segment.Width = FILTERED_WIDTH;
            }

            segment.UpdateVisual();
        }
    }
}
