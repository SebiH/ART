using Assets.Modules.Core;
using System.Collections.Generic;
using UnityEngine;

namespace Assets.Modules.ParallelCoordinates
{
    /// <summary>
    /// Collects line segments generated by line generator which belong to the same data index, for easier operations on all segments
    /// </summary>
    public class DataLine
    {
        private int _dataIndex = -1;
        public int DataIndex { get { return _dataIndex; } }

        private const float DEFAULT_WIDTH = 0.003f;
        private const float FILTERED_WIDTH = 0.0005f;

        private List<LineSegment_Old> _lineSegments = new List<LineSegment_Old>();
        private Color _defaultColor;
        private bool _isHighlighted = false;

        public DataLine(int dataIndex)
        {
            _dataIndex = dataIndex;
            _defaultColor = Theme.GetColor(dataIndex);
        }

        public void AddSegment(LineSegment_Old segment)
        {
            _lineSegments.Add(segment);
            SetHighlight(_isHighlighted, segment);
        }

        public void RemoveSegment(LineSegment_Old segment)
        {
            _lineSegments.Remove(segment);
        }

        public void SetHighlight(bool isHighlighted)
        {
            _isHighlighted = isHighlighted;
            foreach (var segment in _lineSegments)
            {
                SetHighlight(isHighlighted, segment);
            }
        }

        private void SetHighlight(bool isHighlighted, LineSegment_Old segment)
        {
            if (isHighlighted)
            {
                segment.SetColor(_defaultColor);
                segment.SetWidth(DEFAULT_WIDTH);
            }
            else
            {
                segment.SetColor(Color.gray);
                segment.SetWidth(FILTERED_WIDTH);
            }
        }
    }
}
