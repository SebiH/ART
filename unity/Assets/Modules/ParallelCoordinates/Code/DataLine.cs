using System.Collections.Generic;
using UnityEngine;

namespace Assets.Modules.ParallelCoordinates
{
    /// <summary>
    /// Collects line segments generated by line generator which belong to the same data index, for easier operations on all segments
    /// </summary>
    public class DataLine
    {
        public int DataIndex { get; private set; }
        public int SegmentCount { get { return _lineSegments.Count; } }

        private bool _isFiltered = false;
        public bool IsFiltered
        {
            get
            {
                return _isFiltered;
            }

            set
            {
                if (value != _isFiltered)
                {
                    _isFiltered = value;
                    foreach (var segment in _lineSegments)
                    {
                        segment.IsFiltered = value;
                    }
                }
            }
        }

        private Color32 _color = new Color32(255, 255, 255, 255);
        public Color32 Color
        {
            get { return _color; }
            set
            {
                if (value.r != _color.r || value.g != _color.g || value.b != Color.b || value.a != Color.a)
                {
                    _color = value;
                    foreach (var segment in _lineSegments)
                    {
                        segment.DesiredColor = value;
                    }
                }
            }
        }

        private List<LineSegment> _lineSegments = new List<LineSegment>();

        public DataLine(int dataIndex)
        {
            DataIndex = dataIndex;
        }

        public void AddSegment(LineSegment segment)
        {
            _lineSegments.Add(segment);
            segment.IsFiltered = IsFiltered;
            segment.Color = _color;
        }

        public void RemoveSegment(LineSegment segment)
        {
            _lineSegments.Remove(segment);
        }
    }
}
